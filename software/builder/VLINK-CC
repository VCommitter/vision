#!/bin/csh

####  Verify the argument count, ...
if ( $#argv < 2 ) then
	echo "Usage:\nVLINK program-name cc-options"
	exit 1
endif

####  ... give the target a name, ...
set Target = $argv[1]

####  ... initialize/validate audit information, ...
if ( ! $?AuditEnabled ) then
	set AuditFile	= "/dev/null"
	set AuditEntry	= "NA"
else if ( ! $?AuditEntry ) then
	echo "VLINK: Audit Information Not Available"
	exit 1
endif

if ( ! $?AuditFile ) then
	set AuditFile	= $cwd/AUDIT
endif

if ( ! $?AuditSource ) then
	set AuditSource = "`sourceControlSummary`"
endif

if ( ! $?AuditRelease ) then
	set AuditRelease = "$AuditSource"
endif

if ( ! $?AuditShell ) then
	set AuditShell	= $cwd/../../../../builder/templates/auditshell.c
endif

####  ... initialize audit parameter definition strings, ...
set AuditFile_		= \"AUDITINFO:AuditFile:$AuditFile\"
set AuditEntry_		= \"AUDITINFO:AuditEntry:$AuditEntry\"
set CompLogin_		= \"AUDITINFO:CompilationLogin:$LOGNAME\"
set CompDate_		= \"AUDITINFO:CompilationDate:`date`\"
set Platform_		= \"AUDITINFO:BuildPlatform:`uname -srp`\"
set Release_		= \"AUDITINFO:ReleaseID:$AuditRelease\"
set Source_		= \"AUDITINFO:Source:$AuditSource\"

####  ... determine the compiler to use, ...
set OSType = `uname -s`

switch ($OSType)
case AIX:
    set Compiler = xlC
    breaksw
case Darwin:
    set Compiler = c++
    breaksw
case Linux:
####
# If 'visionBuilder' is overriding the compiler (see comments in 'visionBuilder'
# for more information), use that compiler here too...
    if ( $?CXX ) then
	set Compiler = $CXX
    else 
	set Compiler = g++
    endif
    breaksw
case SunOS:
    set Compiler = CC
    breaksw
case HP-UX:
    set Compiler = aCC
    breaksw
default:
    echo ">>> Unsupported OS $OSType"
    exit 1
endsw

####  ... make sure the executable has a place to call home, ...
set TargetDir = `dirname $Target`
if ( "${TargetDir}_" != "_" ) then
    mkdir -p "$TargetDir"
endif

####  ... make sure the executable is writable if it exists, ...
if ( -f $Target ) then
    chmod +w $Target
endif

####  ... compile the audit module and generate an executable, ...
set failed = 0

####  Some versions of parallel make (Solaris x86) actually build all of their
####  top level targets in parallel.  When those versions of make are run in
####  directories with multiple top targets (e.g., backend,tools,etc.), a race
####  results as they compete to build, link, and delete 'auditshell.o'.  Deal
####  with that by creating a unique tempfile containing the auditshell's source
####  and, by extension, the auditshell's compiled output.
set AuditShellPrefix=`mktemp`
set AuditShellSource=${AuditShellPrefix}.cpp
set AuditShellObject=${AuditShellPrefix}.o
cp $AuditShell $AuditShellSource

if ( -f /bin/hp9000s700) then
    set debugFlag = ""
    set stripFlag = ""
    set gprofFlag = ""
    $Compiler -c\
	"-DAuditFile_=$AuditFile_"\
	"-DAuditEntry_=$AuditEntry_"\
	"-DCompilationLogin_=$CompLogin_"\
	"-DCompilationDate_=$CompDate_"\
	"-DPlatform_=$Platform_"\
	"-DRelease_=$Release_"\
	"-DSource_=$Source_"\
	$AuditShellSource
    if ( $status != 0 ) then
        set failed = 1
        echo ">>> Failed to compile \$AuditShell."
        goto cleanup
    endif
    @ i = 2
    while (${argv[$i]:e}_ != o_)
	if ($argv[$i] == "-g") set debugFlag = '-g'
	if ($argv[$i] == "-s") set stripFlag = '-s'
	if ($argv[$i] == "-G") set gprofFlag = '-G'
	@ i = $i + 1
    end
    $Compiler $debugFlag $stripFlag $gprofFlag -o $Target $AuditShellObject $argv[$i-]
    if ( $status != 0 ) then
        set failed = 1
        goto cleanup
    endif
else
    $Compiler\
	-o $Target\
	"-DAuditFile_=$AuditFile_"\
	"-DAuditEntry_=$AuditEntry_"\
	"-DCompilationLogin_=$CompLogin_"\
	"-DCompilationDate_=$CompDate_"\
	"-DPlatform_=$Platform_"\
	"-DRelease_=$Release_"\
	"-DSource_=$Source_"\
	$AuditShellSource\
	$argv[2-]
    if ( $status != 0 ) then
        set failed = 1
        goto cleanup
    endif
endif

####  ... update the audit file and cache directories, ...
chmod a=rx $Target
ls -li $Target >> $AuditFile

if ( -d Executable ) then
	ln $Target Executable
endif

if ( -d Recompiled ) then
	ln $Target Recompiled
endif

####  ... delete the audit shell output file, ...
cleanup:

if ( -f $AuditShellObject ) then
	"rm" -f $AuditShellObject
endif
if ( -f $AuditShellSource ) then
	"rm" -f $AuditShellSource
endif
if ( -f $AuditShellPrefix ) then
	"rm" -f $AuditShellPrefix
endif

####  ... and exit.
exit $failed
